def cubify(s):
    '''
    Turns a string into a cube, like this (for the word "star")
       RATS
      A  TT
     T  A A
    STAR  R
    T  A A
    A  TT
    RATS
    '''

    # Advanced crash prevention techniques
    if (len(s) == 0):
        return ""

    # Initialize blank string
    result = ""

    # Step 1. The top horizontal line: It's (len(s) - 1) spaces, followed by s backwards with a space between each letter.
    result += " " * (len(s) - 1)
    # lol this line
    # Basically it replaces all the ""s with a space and reverses the string. But that includes the blank before the first char, so we have to snip it out.
    result += s.replace("", " ")[::-1][1:]
    result += "\n"

    # Step 2. The diagonals leading to the middle horizontal line: For each line number x from the top (i.e. the step 1 line is line 1), it's generated by
    #   (len(s) - x) spaces + xth last char + (len(s) - 2) * 2 spaces + xth char + (x - 2) spaces + xth char
    # repeated (len(s) - 2) times.
    for i in range(2, len(s)):
        result += " " * (len(s) - i)
        result += s[-1 * i]
        result += " " * ((len(s) * 2) - 3)
        result += s[i - 1]
        result += " " * (i - 2)
        result += s[i - 1]
        result += "\n"

    # Step 3. The middle horizontal line: The string forwards + (len(s) - 3) spaces + last char
    result += s.replace("", " ")[1:]
    result += " " * (len(s) - 3)
    result += s[-1]
    result += "\n"

    # Step 4. The diagonals leading to the bottom horizontal line: For reach line number x from the horizontal line, it's generated by
    #   xth char + ((len(s) * 2) - 3) spaces + xth last char + (len(s) - x - 2) spaces + xth last char
    # repeated (len(s) - 2) times.
    for i in range(2, len(s)):
        result += s[i - 1]
        result += " " * ((len(s) * 2) - 3)
        result += s[-1 * i]
        result += " " * (len(s) - i - 1)
        result += s[-1 * i]
        result += "\n"

    # Step 5. The bottom horizontal line: The string backwards.
    result += s.replace("", " ")[::-1][1:]

    return result

print(cubify(input("Input a string. \n")))